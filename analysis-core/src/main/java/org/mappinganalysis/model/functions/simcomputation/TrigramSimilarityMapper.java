package org.mappinganalysis.model.functions.simcomputation;import org.apache.flink.api.common.functions.MapFunction;import org.apache.flink.graph.Triplet;import org.apache.flink.types.NullValue;import org.mappinganalysis.model.ObjectMap;import org.mappinganalysis.util.Constants;import org.mappinganalysis.util.Utils;import org.simmetrics.StringMetric;import java.math.BigDecimal;/** * Return trigram similarity for 2 labels. */@Deprecatedpublic class TrigramSimilarityMapper implements MapFunction<Triplet<Long, ObjectMap, NullValue>,    Triplet<Long, ObjectMap, ObjectMap>> {  @Override  public Triplet<Long, ObjectMap, ObjectMap> map(Triplet<Long, ObjectMap, NullValue> triplet) throws Exception {    final String srcLabel = triplet.getSrcVertex().getValue().getLabel();    final String trgLabel = triplet.getTrgVertex().getValue().getLabel();    Triplet<Long, ObjectMap, ObjectMap> resultTriplet = SimilarityComputation.initResultTriplet(triplet);    StringMetric metric = Utils.getTrigramMetricAndSimplifyStrings();    if (!srcLabel.equals(Constants.NO_LABEL_FOUND) && !trgLabel.equals(Constants.NO_LABEL_FOUND)) {      double similarity = metric.compare(srcLabel.toLowerCase().trim(), trgLabel.toLowerCase().trim());      BigDecimal tmpResult = new BigDecimal(similarity);      similarity = tmpResult.setScale(6, BigDecimal.ROUND_HALF_UP).doubleValue();      resultTriplet.getEdge().getValue().put(Constants.SIM_TRIGRAM, similarity);      return resultTriplet;    } else {      return resultTriplet;    }  }}