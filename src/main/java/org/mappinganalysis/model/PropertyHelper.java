package org.mappinganalysis.model;import com.google.common.collect.Sets;import org.mappinganalysis.utils.Utils;import java.util.Map;import java.util.Set;/** * Helper class. */public class PropertyHelper {  /**   * Add a single value to an existing properties object with key value entries as well as multi-valued   * key value pairs as lists.   * @param vertexProperties existing properties   * @param value new value   * @param key key   * @param isClusterRepresentative strings are simplified for cluster representative   * @return resulting properties   */  public static ObjectMap addValueToProperties(ObjectMap vertexProperties,                                                         Object value, String key, boolean isClusterRepresentative) {    if (key.equals(Utils.LABEL) && isClusterRepresentative) {      value = Utils.simplify((String) value);    }    return addValueToProperties(vertexProperties, value, key);  }  public static ObjectMap addValueToProperties(ObjectMap vertexProperties, Object value, String key) {    if (vertexProperties.containsKey(key)) {      Object oldValue = vertexProperties.get(key);      if (oldValue instanceof Set) {        Set<Object> values = Sets.newHashSet((Set<Object>) oldValue);        values.add(value);        vertexProperties.put(key, values);      } else {        vertexProperties.put(key, Sets.newHashSet(oldValue, value));      }    } else {      vertexProperties.put(key, value);    }    return vertexProperties;  }}