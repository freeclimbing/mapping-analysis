package org.mappinganalysis.model.functions.preprocessing;

import org.apache.flink.api.common.functions.GroupReduceFunction;
import org.apache.flink.graph.Vertex;
import org.apache.flink.util.Collector;
import org.mappinganalysis.model.ObjectMap;
import org.mappinganalysis.utils.Utils;

/**
 * Generate new component ids based on type affiliation and current component id.
 * If no type is found, the temporary component id will generated by using the vertex id.
 */
public class GenerateHashCcIdGroupReduceFunction implements GroupReduceFunction<Vertex<Long, ObjectMap>, Vertex<Long, ObjectMap>> {

  // todo perhaps?
//  private ListAccumulator<Edge<Long, NullValue>> filteredLinks = new ListAccumulator<>();
//
//  @Override
//  public void open(final Configuration parameters) throws Exception {
//    super.open(parameters);
//    getRuntimeContext().addAccumulator(Utils.EXCLUDE_FROM_COMPONENT_ACCUMULATOR, filterMatches);
//  }

  @Override
  public void reduce(Iterable<Vertex<Long, ObjectMap>> vertices,
                     Collector<Vertex<Long, ObjectMap>> collector) throws Exception {
    Long hash = null;
    for (Vertex<Long, ObjectMap> vertex : vertices) {
      if (hasNoType(vertex)) {
        vertex.getValue().put(Utils.HASH_CC, Utils.getHash(vertex.getId().toString()));
      } else {
        if (hash == null) {
          hash = Utils.getHash(vertex.getValue().get(Utils.COMP_TYPE).toString()
              .concat(vertex.getValue().get(Utils.CC_ID).toString()));
        }
        vertex.getValue().put(Utils.HASH_CC, hash);
      }
      collector.collect(vertex);
    }
  }

  private boolean hasNoType(Vertex<Long, ObjectMap> vertex) {
    return vertex.getValue().get(Utils.COMP_TYPE).equals(Utils.NO_TYPE_AVAILABLE)
        || vertex.getValue().get(Utils.COMP_TYPE).equals(Utils.NO_TYPE_FOUND);
  }
}
