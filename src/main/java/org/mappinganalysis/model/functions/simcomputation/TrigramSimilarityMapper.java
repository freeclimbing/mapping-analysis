package org.mappinganalysis.model.functions.simcomputation;import org.apache.flink.api.common.functions.MapFunction;import org.apache.flink.graph.Edge;import org.apache.flink.graph.Triplet;import org.apache.flink.types.NullValue;import org.mappinganalysis.model.ObjectMap;import org.mappinganalysis.utils.Utils;import org.simmetrics.StringMetric;/** * Return similarity 1f if labels of two resources are equal. */public class TrigramSimilarityMapper implements MapFunction<Triplet<Long, ObjectMap, NullValue>,    Triplet<Long, ObjectMap, ObjectMap>> {  @Override  public Triplet<Long, ObjectMap, ObjectMap> map(Triplet<Long, ObjectMap, NullValue> triplet) throws Exception {    final ObjectMap srcProps = triplet.getSrcVertex().getValue();    final String srcLabel = srcProps.containsKey(Utils.LABEL)        ? srcProps.get(Utils.LABEL).toString() : Utils.NO_VALUE;    final ObjectMap trgProps = triplet.getTrgVertex().getValue();    final String trgLabel = trgProps.containsKey(Utils.LABEL)        ? trgProps.get(Utils.LABEL).toString() : Utils.NO_VALUE;    StringMetric metric = Utils.getTrigramMetric(true);    float similarity = 0f;    if (!srcLabel.equals(Utils.NO_VALUE) && !trgLabel.equals(Utils.NO_VALUE)) {      similarity = metric.compare(srcLabel.toLowerCase(), trgLabel.toLowerCase());    }    ObjectMap property = new ObjectMap();    property.put(Utils.TRIGRAM, similarity);    return new Triplet<>(        triplet.getSrcVertex(),        triplet.getTrgVertex(),        new Edge<>(            triplet.getSrcVertex().getId(),            triplet.getTrgVertex().getId(),            property));  }}