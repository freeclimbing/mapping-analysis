package org.mappinganalysis.model.functions.simcomputation;import org.apache.flink.api.common.functions.MapFunction;import org.apache.flink.graph.Triplet;import org.apache.flink.types.NullValue;import org.mappinganalysis.model.ObjectMap;import org.mappinganalysis.utils.Utils;import org.simmetrics.StringMetric;/** * Return trigram similarity for 2 labels. */public class TrigramSimilarityMapper implements MapFunction<Triplet<Long, ObjectMap, NullValue>,    Triplet<Long, ObjectMap, ObjectMap>> {  @Override  public Triplet<Long, ObjectMap, ObjectMap> map(Triplet<Long, ObjectMap, NullValue> triplet) throws Exception {    final String srcLabel = triplet.getSrcVertex().getValue().containsKey(Utils.LABEL)        ? triplet.getSrcVertex().getValue().get(Utils.LABEL).toString() : Utils.NO_LABEL_FOUND;    final String trgLabel = triplet.getTrgVertex().getValue().containsKey(Utils.LABEL)        ? triplet.getTrgVertex().getValue().get(Utils.LABEL).toString() : Utils.NO_LABEL_FOUND;    Triplet<Long, ObjectMap, ObjectMap> resultTriplet = SimCompUtility.initResultTriplet(triplet);    StringMetric metric = Utils.getTrigramMetricAndSimplifyStrings();    if (!srcLabel.equals(Utils.NO_LABEL_FOUND) && !trgLabel.equals(Utils.NO_LABEL_FOUND)) {      double similarity = metric.compare(srcLabel.toLowerCase(), trgLabel.toLowerCase());      resultTriplet.getEdge().getValue().put(Utils.SIM_TRIGRAM, similarity);      return resultTriplet;    } else {      return resultTriplet;    }  }}