package org.mappinganalysis;import org.apache.flink.api.common.ProgramDescription;import org.apache.flink.api.common.functions.FlatJoinFunction;import org.apache.flink.api.java.DataSet;import org.apache.flink.api.java.ExecutionEnvironment;import org.apache.flink.api.java.LocalEnvironment;import org.apache.flink.api.java.tuple.Tuple2;import org.apache.flink.configuration.Configuration;import org.apache.flink.graph.Edge;import org.apache.flink.graph.Graph;import org.apache.flink.graph.Triplet;import org.apache.flink.graph.Vertex;import org.apache.flink.types.NullValue;import org.apache.flink.util.Collector;import org.mappinganalysis.graph.ClusterComputation;import org.mappinganalysis.graph.FlinkConnectedComponents;import org.mappinganalysis.io.JDBCDataLoader;import org.mappinganalysis.model.ObjectMap;import org.mappinganalysis.model.Preprocessing;import org.mappinganalysis.model.functions.*;import org.mappinganalysis.utils.Stats;import org.mappinganalysis.utils.Utils;/** * Mapping analysis example */public class MappingAnalysisExample implements ProgramDescription {  public static void main(String[] args) throws Exception {    Configuration conf = new Configuration();    conf.setLong("taskmanager.network.numberOfBuffers", 16384L);    ExecutionEnvironment environment = new LocalEnvironment(conf); //ExecutionEnvironment.getExecutionEnvironment();    Graph<Long, ObjectMap, NullValue> graph = getInputGraph(Utils.GEO_FULL_NAME, environment);    /**     * 1. PREPROCESSING     * - comment line(s) if not needed     */    graph = Preprocessing.applyLinkFilterStrategy(graph, environment);    graph = Preprocessing.applyTypePreprocessing(graph, environment);    final DataSet<Vertex<Long, ObjectMap>> baseVertices = graph.getVertices();    /**     * 2. INITIAL MATCHING     * - apply similarity functions, similarities are added as edge value and merged     * (if more than one similarity)     */    final DataSet<Triplet<Long, ObjectMap, ObjectMap>> accumulatedSimValues        = initialSimilarityComputation(graph.getTriplets());    // update triplets with edge props//    DataSet<Edge<Long, Map<String, Object>>> joinedEdges = graph//        .getEdges()//        .join(accumulatedSimValues)//        .where(0, 1).equalTo(0, 1)//        .with(new CcResultEdgesJoin());    /**     * 3. INITIAL CLUSTERING     * - connected components     */    final DataSet<Tuple2<Long, Long>> ccEdges = graph.getEdges().project(0, 1);    final DataSet<Long> ccVertices = baseVertices.map(new CcVerticesCreator());    FlinkConnectedComponents connectedComponents = new FlinkConnectedComponents(environment);    final DataSet<Tuple2<Long, Long>> ccResult = connectedComponents.compute(ccVertices, ccEdges, 1000);    // update all vertices with ccId    DataSet<Vertex<Long, ObjectMap>> ccResultVertices = baseVertices        .join(ccResult)        .where(0).equalTo(0)        .with(new CcResultVerticesJoin());    // get all/new edges in components    DataSet<Edge<Long, NullValue>> newEdges        = ClusterComputation.restrictToNewEdges(graph.getEdges(),        ClusterComputation.computeComponentEdges(ccResultVertices));    DataSet<Triplet<Long, ObjectMap, ObjectMap>> newSimValues        = initialSimilarityComputation(Graph.fromDataSet(        baseVertices, newEdges, environment).getTriplets());    DataSet<Tuple2<Long, Long>> newSimValuesSimple = newSimValues.project(0, 1);    DataSet<Tuple2<Long, Long>> accSimValuesSimple = accumulatedSimValues.project(0, 1);    DataSet<Tuple2<Long, Long>> newCcEdges = newSimValuesSimple.union(accSimValuesSimple);    // 2. time cc    DataSet<Tuple2<Long, Long>> newCcResult = connectedComponents        .compute(ccVertices, newCcEdges, 1000);    DataSet<Vertex<Long, ObjectMap>> newCcResultVertices = baseVertices        .join(newCcResult)        .where(0).equalTo(0)        .with(new CcResultVerticesJoin());    /**     * 4. Determination of cluster representative     * - currently: entity from best "data source" (GeoNames > DBpedia > others)     */    final DataSet<Vertex<Long, ObjectMap>> mergedCluster = newCcResultVertices        .groupBy(new CcIdKeySelector())        .reduceGroup(new BestDataSourceAllLabelsGroupReduceFunction());    Stats.printLabelsForMergedClusters(mergedCluster);//  Stats.countPrintResourcesPerCc(newCcResult);    // Cluster refinement//    mergedCluster.filter(new FilterFunction<Vertex<Long, FlinkVertex>>() {//      @Override//      public boolean filter(Vertex<Long, FlinkVertex> vertex) throws Exception {//         return !(vertex.getValue().getProperties().get(Utils.CL_VERTICES) instanceof List);//      }//    });////    DataSet<Edge<Long, Double>> edgesCrossedClusters = mergedCluster//        .cross(mergedCluster)//        .with(new ClusterEdgeCreationCrossFunction())//        .filter(new FilterFunction<Edge<Long, Double>>() {//          @Override//          public boolean filter(Edge<Long, Double> edge) throws Exception {//            return edge.getValue() > 0.7;//          }//        });////    edgesCrossedClusters.print();//    System.out.println(edgesCrossedClusters.count());  }  public static DataSet<Triplet<Long, ObjectMap, ObjectMap>>  initialSimilarityComputation(DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return joinDifferentSimilarityValues(basicGeoSimilarity(baseTriplets),        basicTrigramSimilarity(baseTriplets),        basicTypeSimilarity(baseTriplets));  }  @SafeVarargs  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> joinDifferentSimilarityValues(      DataSet<Triplet<Long, ObjectMap, ObjectMap>>... tripletDataSet) {    DataSet<Triplet<Long, ObjectMap, ObjectMap>> triplets = null;    boolean first = false;    for (DataSet<Triplet<Long, ObjectMap, ObjectMap>> dataSet : tripletDataSet) {      if (!first) {        triplets = dataSet;        first = true;      } else {        triplets = triplets            .fullOuterJoin(dataSet)            .where(0, 1)            .equalTo(0, 1)            .with(new JoinSimilarityValueFunction());      }    }    return triplets;  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicTypeSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .map(new TypeSimilarityMapper())        .filter(new TypeFilter());  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicTrigramSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .map(new TrigramSimilarityMapper())        .filter(new TrigramSimilarityFilter());  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicGeoSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .filter(new EmptyGeoCodeFilter())        .map(new GeoCodeSimFunction())        .filter(new GeoCodeThreshold());  }  /**   * Create the input graph for further analysis,   * restrict to edges where source and target are in vertices set.   * @return graph with vertices and edges.   * @throws Exception   * @param fullDbString complete server+port+db string   */  public static Graph<Long, ObjectMap, NullValue> getInputGraph(      String fullDbString, ExecutionEnvironment environment) throws Exception {    JDBCDataLoader loader = new JDBCDataLoader(environment);    DataSet<Vertex<Long, ObjectMap>> vertices = loader.getVertices(fullDbString);    // restrict edges to these where source and target are vertices    DataSet<Edge<Long, NullValue>> edges = loader.getEdges(fullDbString)        .leftOuterJoin(vertices)        .where(0).equalTo(0)        .with(new EdgeRestrictFlatJoinFunction())        .leftOuterJoin(vertices)        .where(1).equalTo(0)        .with(new EdgeRestrictFlatJoinFunction());    // delete vertices without any edges due to restriction    DataSet<Vertex<Long, ObjectMap>> left = vertices        .leftOuterJoin(edges)        .where(0).equalTo(0)        .with(new VertexRestrictFlatJoinFunction()).distinct(0);    DataSet<Vertex<Long, ObjectMap>> finalVertices = vertices        .leftOuterJoin(edges)        .where(0).equalTo(1)        .with(new VertexRestrictFlatJoinFunction()).distinct(0)        .union(left);    return Graph.fromDataSet(finalVertices, edges, environment);  }  @Override  public String getDescription() {    return MappingAnalysisExample.class.getName();  }  private static class EdgeRestrictFlatJoinFunction implements FlatJoinFunction<Edge<Long, NullValue>,      Vertex<Long, ObjectMap>, Edge<Long, NullValue>> {    @Override    public void join(Edge<Long, NullValue> edge, Vertex<Long, ObjectMap> vertex,                     Collector<Edge<Long, NullValue>> collector) throws Exception {      if (vertex != null) {        collector.collect(edge);      }    }  }  private static class VertexRestrictFlatJoinFunction implements FlatJoinFunction<Vertex<Long, ObjectMap>,      Edge<Long, NullValue>, Vertex<Long, ObjectMap>> {    @Override    public void join(Vertex<Long, ObjectMap> vertex, Edge<Long, NullValue> edge,                     Collector<Vertex<Long, ObjectMap>> collector) throws Exception {      if (edge != null) {        collector.collect(vertex);      }    }  }}