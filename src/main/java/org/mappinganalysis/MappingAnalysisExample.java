package org.mappinganalysis;import org.apache.commons.cli.*;import org.apache.flink.api.common.ProgramDescription;import org.apache.flink.api.common.functions.FilterFunction;import org.apache.flink.api.common.functions.FlatJoinFunction;import org.apache.flink.api.java.DataSet;import org.apache.flink.api.java.ExecutionEnvironment;import org.apache.flink.api.java.tuple.Tuple2;import org.apache.flink.graph.Edge;import org.apache.flink.graph.Graph;import org.apache.flink.graph.Triplet;import org.apache.flink.graph.Vertex;import org.apache.flink.types.NullValue;import org.apache.flink.util.Collector;import org.mappinganalysis.graph.ClusterComputation;import org.mappinganalysis.graph.FlinkConnectedComponents;import org.mappinganalysis.io.JDBCDataLoader;import org.mappinganalysis.model.ObjectMap;import org.mappinganalysis.model.Preprocessing;import org.mappinganalysis.model.functions.*;import org.mappinganalysis.utils.Stats;import org.mappinganalysis.utils.Utils;import java.util.Set;/** * Mapping analysis example */public class MappingAnalysisExample implements ProgramDescription {  private static Options OPTIONS;  private static final String OPTION_LINK_SANITY_STRATEGY = "lss";  private static final String OPTION_PRE_FILTER_STRATEGY = "pfs";  private static final String OPTION_ONLY_INITIAL_CLUSTER = "ncc";  private static final String OPTION_REPRESENTATIVE_STRATEGY = "rs";  private static final String OPTION_DATA_SET_NAME = "ds";  private static final String OPTION_WRITE_STATS = "ws";  static {    OPTIONS = new Options();    OPTIONS.addOption(OPTION_DATA_SET_NAME, "dataset-name", true, // done        "Choose one of the datasets [geo, linklion].");    OPTIONS.addOption(OPTION_LINK_SANITY_STRATEGY, "link-sanity-1-n-strategy", false, // done        "Use delete 1:n strategy for initial link check.");    OPTIONS.addOption(OPTION_PRE_FILTER_STRATEGY, "pre-filter-strategy", true, // done        "Specify preprocessing filter strategy for entity properties [combined (default), geo, label, type");    OPTIONS.addOption(OPTION_ONLY_INITIAL_CLUSTER, "only-initial-cluster", false, // done        "Don't compute final clusters, stop after preprocessing.");    OPTIONS.addOption(OPTION_REPRESENTATIVE_STRATEGY, "representative-strategy", true, //TODO        "Set strategy to determine cluster representative.");    OPTIONS.addOption(OPTION_WRITE_STATS, "write-stats", false, "Write statistics to output."); // done  }  public static void main(String[] args) throws Exception {    CommandLine cmd = parseArguments(args);    if (cmd == null) {      return;    }    String dataset = "";    final String optionDataset = cmd.getOptionValue(OPTION_DATA_SET_NAME);    if (optionDataset.equals("geo")) {      dataset = Utils.GEO_FULL_NAME;    } else if (optionDataset.equals("linklion")) {      dataset = Utils.LL_FULL_NAME;    }    boolean useLinkFilter = cmd.hasOption(OPTION_LINK_SANITY_STRATEGY);    final String preFilterStrategy = cmd.getOptionValue(OPTION_PRE_FILTER_STRATEGY, "combined");    boolean stopAfterInitialClustering = cmd.hasOption(OPTION_ONLY_INITIAL_CLUSTER);    boolean printStats = cmd.hasOption(OPTION_WRITE_STATS);    /**     * Get data.     */    Graph<Long, ObjectMap, NullValue> graph = getInputGraph(dataset);    /**     * 1. PREPROCESSING     * - comment line(s) if not needed     */    if (useLinkFilter) {      graph = Preprocessing.applyLinkFilterStrategy(graph);    }    graph = Preprocessing.applyTypePreprocessing(graph);    final DataSet<Vertex<Long, ObjectMap>> baseVertices = graph.getVertices();    /**     * 2. INITIAL MATCHING     * - apply similarity functions, similarities are added as edge value and merged     * (if more than one similarity)     */    final DataSet<Triplet<Long, ObjectMap, ObjectMap>> accumulatedSimValues        = initialSimilarityComputation(graph.getTriplets(), preFilterStrategy);    // updaste triplets with edge props//    DataSet<Edge<Long, Map<String, Object>>> joinedEdges = graph//        .getEdges()//        .join(accumulatedSimValues)//        .where(0, 1).equalTo(0, 1)//        .with(new CcResultEdgesJoin());    /**     * 3. INITIAL CLUSTERING     * - connected components     */    final DataSet<Tuple2<Long, Long>> ccEdges = graph.getEdges().project(0, 1);    final DataSet<Long> ccVertices = baseVertices.map(new CcVerticesCreator());    FlinkConnectedComponents connectedComponents = new FlinkConnectedComponents();    final DataSet<Tuple2<Long, Long>> ccResult = connectedComponents.compute(ccVertices, ccEdges, 1000);    // update all vertices with ccId    DataSet<Vertex<Long, ObjectMap>> ccResultVertices = baseVertices        .join(ccResult)        .where(0).equalTo(0)        .with(new CcResultVerticesJoin());    // get all/new edges in components    DataSet<Edge<Long, NullValue>> newEdges        = ClusterComputation.restrictToNewEdges(graph.getEdges(),        ClusterComputation.computeComponentEdges(ccResultVertices));    DataSet<Triplet<Long, ObjectMap, ObjectMap>> newSimValues        = initialSimilarityComputation(baseVertices, newEdges, preFilterStrategy);    DataSet<Tuple2<Long, Long>> newSimValuesSimple = newSimValues.project(0, 1);    DataSet<Tuple2<Long, Long>> accSimValuesSimple = accumulatedSimValues.project(0, 1);    DataSet<Tuple2<Long, Long>> newCcEdges = newSimValuesSimple.union(accSimValuesSimple);    // 2. time cc    DataSet<Tuple2<Long, Long>> newCcResult = connectedComponents        .compute(ccVertices, newCcEdges, 1000);    DataSet<Vertex<Long, ObjectMap>> newCcResultVertices = baseVertices        .join(newCcResult)        .where(0).equalTo(0)        .with(new CcResultVerticesJoin());    if (stopAfterInitialClustering) {      if (printStats) {        Stats.countPrintResourcesPerCc(newCcResult);      }      return;    }    /**     * 4. Determination of cluster representative     * - currently: entity from best "data source" (GeoNames > DBpedia > others)     */    final DataSet<Vertex<Long, ObjectMap>> mergedCluster = newCcResultVertices        .groupBy(new CcIdKeySelector())        .reduceGroup(new BestDataSourceAllLabelsGroupReduceFunction());    // TODO print at end of program until #15 is fixed    if (printStats) {      Stats.countPrintResourcesPerCc(newCcResult);      Stats.printLabelsForMergedClusters(mergedCluster);    }    /**     * 5. Cluster Refinement     */    mergedCluster.filter(new FilterFunction<Vertex<Long, ObjectMap>>() {      @Override      public boolean filter(Vertex<Long, ObjectMap> vertex) throws Exception {         return !(vertex.getValue().get(Utils.CL_VERTICES) instanceof Set);      }    });    DataSet<Edge<Long, Double>> edgesCrossedClusters = mergedCluster        .cross(mergedCluster)        .with(new ClusterEdgeCreationCrossFunction())        .filter(new FilterFunction<Edge<Long, Double>>() {          @Override          public boolean filter(Edge<Long, Double> edge) throws Exception {            return edge.getValue() > 0.7;          }        });    if (printStats) {      edgesCrossedClusters.print();      System.out.println(edgesCrossedClusters.count());    }  }  public static DataSet<Triplet<Long, ObjectMap, ObjectMap>>  initialSimilarityComputation(DataSet<Vertex<Long, ObjectMap>> vertices,                               DataSet<Edge<Long, NullValue>> edges,                               String filter) {    DataSet<Triplet<Long, ObjectMap, NullValue>> triplets = Graph        .fromDataSet(vertices, edges, ExecutionEnvironment.getExecutionEnvironment())        .getTriplets();    return initialSimilarityComputation(triplets, filter);  }  public static DataSet<Triplet<Long, ObjectMap, ObjectMap>>  initialSimilarityComputation(DataSet<Triplet<Long, ObjectMap, NullValue>> triplets, String filter) {    switch (filter) {      case "geo":        return basicGeoSimilarity(triplets);      case "label":        return basicTrigramSimilarity(triplets);      case "type":        return basicTypeSimilarity(triplets);      default:        return joinDifferentSimilarityValues(basicGeoSimilarity(triplets),            basicTrigramSimilarity(triplets),            basicTypeSimilarity(triplets));    }  }  @SafeVarargs  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> joinDifferentSimilarityValues(      DataSet<Triplet<Long, ObjectMap, ObjectMap>>... tripletDataSet) {    DataSet<Triplet<Long, ObjectMap, ObjectMap>> triplets = null;    boolean first = false;    for (DataSet<Triplet<Long, ObjectMap, ObjectMap>> dataSet : tripletDataSet) {      if (!first) {        triplets = dataSet;        first = true;      } else {        triplets = triplets            .fullOuterJoin(dataSet)            .where(0, 1)            .equalTo(0, 1)            .with(new JoinSimilarityValueFunction());      }    }    return triplets;  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicTypeSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .map(new TypeSimilarityMapper())        .filter(new TypeFilter());  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicTrigramSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .map(new TrigramSimilarityMapper())        .filter(new TrigramSimilarityFilter());  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicGeoSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .filter(new EmptyGeoCodeFilter())        .map(new GeoCodeSimFunction())        .filter(new GeoCodeThreshold());  }  /**   * Create the input graph for further analysis,   * restrict to edges where source and target are in vertices set.   * @return graph with vertices and edges.   * @throws Exception   * @param fullDbString complete server+port+db string   */  public static Graph<Long, ObjectMap, NullValue> getInputGraph(String fullDbString)      throws Exception {    JDBCDataLoader loader = new JDBCDataLoader();    DataSet<Vertex<Long, ObjectMap>> vertices = loader.getVertices(fullDbString);    // restrict edges to these where source and target are vertices    DataSet<Edge<Long, NullValue>> edges = loader.getEdges(fullDbString)        .leftOuterJoin(vertices)        .where(0).equalTo(0)        .with(new EdgeRestrictFlatJoinFunction())        .leftOuterJoin(vertices)        .where(1).equalTo(0)        .with(new EdgeRestrictFlatJoinFunction());    // delete vertices without any edges due to restriction    DataSet<Vertex<Long, ObjectMap>> left = vertices        .leftOuterJoin(edges)        .where(0).equalTo(0)        .with(new VertexRestrictFlatJoinFunction()).distinct(0);    DataSet<Vertex<Long, ObjectMap>> finalVertices = vertices        .leftOuterJoin(edges)        .where(0).equalTo(1)        .with(new VertexRestrictFlatJoinFunction()).distinct(0)        .union(left);    return Graph.fromDataSet(finalVertices, edges,        ExecutionEnvironment.getExecutionEnvironment());  }  /**   * Parses the program arguments.   *   * @param args program arguments   * @return command line which can be used in the program   */  private static CommandLine parseArguments(String[] args) throws ParseException {    if (args.length == 0) {      HelpFormatter formatter = new HelpFormatter();      formatter.printHelp(MappingAnalysisExample.class.getName(), OPTIONS, true);      return null;    }    CommandLineParser parser = new BasicParser();    return parser.parse(OPTIONS, args);  }  @Override  public String getDescription() {    return MappingAnalysisExample.class.getName();  }  private static class EdgeRestrictFlatJoinFunction implements FlatJoinFunction<Edge<Long, NullValue>,      Vertex<Long, ObjectMap>, Edge<Long, NullValue>> {    @Override    public void join(Edge<Long, NullValue> edge, Vertex<Long, ObjectMap> vertex,                     Collector<Edge<Long, NullValue>> collector) throws Exception {      if (vertex != null) {        collector.collect(edge);      }    }  }  private static class VertexRestrictFlatJoinFunction implements FlatJoinFunction<Vertex<Long, ObjectMap>,      Edge<Long, NullValue>, Vertex<Long, ObjectMap>> {    @Override    public void join(Vertex<Long, ObjectMap> vertex, Edge<Long, NullValue> edge,                     Collector<Vertex<Long, ObjectMap>> collector) throws Exception {      if (edge != null) {        collector.collect(vertex);      }    }  }}