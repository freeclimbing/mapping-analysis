package org.mappinganalysis;import com.google.common.collect.Lists;import org.apache.commons.cli.*;import org.apache.flink.api.common.JobExecutionResult;import org.apache.flink.api.common.ProgramDescription;import org.apache.flink.api.common.functions.FlatJoinFunction;import org.apache.flink.api.common.functions.MapFunction;import org.apache.flink.api.java.DataSet;import org.apache.flink.api.java.ExecutionEnvironment;import org.apache.flink.api.java.LocalEnvironment;import org.apache.flink.api.java.functions.KeySelector;import org.apache.flink.api.java.tuple.Tuple1;import org.apache.flink.api.java.tuple.Tuple2;import org.apache.flink.configuration.Configuration;import org.apache.flink.graph.Edge;import org.apache.flink.graph.Graph;import org.apache.flink.graph.Triplet;import org.apache.flink.graph.Vertex;import org.apache.flink.types.NullValue;import org.apache.flink.util.Collector;import org.apache.log4j.Logger;import org.mappinganalysis.model.ObjectMap;import org.mappinganalysis.model.Preprocessing;import org.mappinganalysis.model.functions.CcIdKeySelector;import org.mappinganalysis.model.functions.HashCcIdKeySelector;import org.mappinganalysis.model.functions.preprocessing.AddShadingTypeMapFunction;import org.mappinganalysis.model.functions.preprocessing.CcIdAndCompTypeKeySelector;import org.mappinganalysis.model.functions.preprocessing.GenerateHashCcIdGroupReduceFunction;import org.mappinganalysis.model.functions.representative.*;import org.mappinganalysis.model.functions.simcomputation.AggSimValueTripletMapFunction;import org.mappinganalysis.model.functions.simcomputation.SimCompUtility;import org.mappinganalysis.model.functions.simsort.SimSort;import org.mappinganalysis.model.functions.typegroupby.TypeGroupBy;import org.mappinganalysis.utils.Stats;import org.mappinganalysis.utils.Utils;import java.util.ArrayList;import java.util.List;/** * Mapping analysis example */public class MappingAnalysisExample implements ProgramDescription {  private static final Logger LOG = Logger.getLogger(MappingAnalysisExample.class);  private static ExecutionEnvironment env;// = ExecutionEnvironment.getExecutionEnvironment();  /**   * Command line options   */  private static final String OPTION_LINK_FILTER_PREPROCESSING = "lfp";  private static final String OPTION_PRE_CLUSTER_FILTER = "pcf";  private static final String OPTION_ONLY_INITIAL_CLUSTER = "oic";//  private static final String OPTION_REPRESENTATIVE_STRATEGY = "rs";  private static final String OPTION_DATA_SET_NAME = "ds";  private static final String OPTION_WRITE_STATS = "ws";  private static final String OPTION_CLUSTER_STATS = "cs";  private static final String OPTION_IGNORE_MISSING_PROPERTIES = "imp";  private static final String OPTION_PROCESSING_MODE = "pm";  private static final String OPTION_TYPE_MISS_MATCH_CORRECTION = "tmmc";  private static boolean IS_TYPE_MISS_MATCH_CORRECTION_ACTIVE;  private static boolean STOP_AFTER_INITIAL_CLUSTERING;  private static String PROCESSING_MODE;  private static List<Long> CLUSTER_STATS;  private static Options OPTIONS;  static {    OPTIONS = new Options();    // general    OPTIONS.addOption(OPTION_DATA_SET_NAME, "dataset-name", true,        "Choose one of the datasets [" + Utils.CMD_GEO + " (default), " + Utils.CMD_LL + "].");    OPTIONS.addOption(OPTION_PROCESSING_MODE, "processing-mode", true,        "Choose the processing mode [SimSort + TypeGroupBy (default), simSortOnly].");    OPTIONS.addOption(OPTION_IGNORE_MISSING_PROPERTIES, "ignore-missing-properties", false,        "Do not penalize missing properties on resources in similarity computation process (default: false).");    OPTIONS.addOption(OPTION_ONLY_INITIAL_CLUSTER, "only-initial-cluster", false,        "Don't compute final clusters, stop after preprocessing (default: false).");    // Preprocessing    OPTIONS.addOption(OPTION_LINK_FILTER_PREPROCESSING, "link-filter-preprocessing", false,        "Exclude edges where vertex has several target vertices having equal dataset ontology (default: false).");    OPTIONS.addOption(OPTION_TYPE_MISS_MATCH_CORRECTION, "type-miss-match-correction", false,        "Exclude edges where directly connected source and target vertices have different type property values. " +            "(default: false).");    // to be changed    OPTIONS.addOption(OPTION_PRE_CLUSTER_FILTER, "pre-cluster-filter", true,        "Specify preprocessing filter strategy for entity properties ["            + Utils.DEFAULT_VALUE + " (combined), geo, label, type]");//    OPTIONS.addOption(OPTION_REPRESENTATIVE_STRATEGY, "representative-strategy",//        true, "Set strategy to determine cluster representative (currently only best datasource (default))");    // stats    OPTIONS.addOption(OPTION_WRITE_STATS, "write-stats", false,        "Write statistics to output (default: false).");    Option clusterStats = new Option(OPTION_CLUSTER_STATS, "cluster-stats", true,        "Be more verbose while processing specified cluster ids.");    clusterStats.setArgs(Option.UNLIMITED_VALUES);    OPTIONS.addOption(clusterStats);  }  /**   * main program   * @param args cmd args   * @throws Exception   */  public static void main(String[] args) throws Exception {    Configuration conf = new Configuration();    conf.setLong("taskmanager.network.numberOfBuffers", 65536L);    env =  new LocalEnvironment(conf);    CommandLine cmd = parseArguments(args);    if (cmd == null) {      return;    }    String dataset;    final String optionDataset = cmd.getOptionValue(OPTION_DATA_SET_NAME);    if (optionDataset != null && optionDataset.equals(Utils.CMD_LL)) {      dataset = Utils.LL_FULL_NAME;    } else {      dataset = Utils.GEO_FULL_NAME;    }    Utils.IS_LINK_FILTER_ACTIVE = cmd.hasOption(OPTION_LINK_FILTER_PREPROCESSING);    IS_TYPE_MISS_MATCH_CORRECTION_ACTIVE = cmd.hasOption(OPTION_TYPE_MISS_MATCH_CORRECTION);    PROCESSING_MODE = cmd.getOptionValue(OPTION_PROCESSING_MODE, Utils.DEFAULT_VALUE);    Utils.IGNORE_MISSING_PROPERTIES = cmd.hasOption(OPTION_IGNORE_MISSING_PROPERTIES);    Utils.PRE_CLUSTER_STRATEGY = cmd.getOptionValue(OPTION_PRE_CLUSTER_FILTER, Utils.DEFAULT_VALUE);    STOP_AFTER_INITIAL_CLUSTERING = cmd.hasOption(OPTION_ONLY_INITIAL_CLUSTER);    Utils.PRINT_STATS = cmd.hasOption(OPTION_WRITE_STATS);    String[] clusterStats = cmd.getOptionValues(OPTION_CLUSTER_STATS);    if (clusterStats != null) {      CLUSTER_STATS = Utils.convertWsSparatedString(clusterStats);    }    String ds = dataset.equals(Utils.LL_FULL_NAME) ? "linklion" : "geo";    LOG.info("");    LOG.info("[0] GET DATASET " + ds);    LOG.info("###############");    final Graph<Long, ObjectMap, NullValue> graph = Preprocessing.getInputGraph(dataset, env);    execute(graph);  }  /**   * Mapping analysis computation   * @param preprocGraph input graph   * @throws Exception   */  private static void execute(Graph<Long, ObjectMap, NullValue> preprocGraph) throws Exception {    LOG.info("");    LOG.info("[1] PREPROCESSING");    LOG.info("#################");//    ArrayList<Long> clusterList = Lists.newArrayList(1458L);//, 2913L);//, 4966L, 5678L);    ArrayList<Long> vertexList = Lists.newArrayList(2006L, 2007L, 4759L, 4760L, 7332L, 4961L, 1335L, 1334L, 7283L);    preprocGraph = Preprocessing.applyTypeToInternalTypeMapping(preprocGraph, env);    preprocGraph = Preprocessing.applyLinkFilterStrategy(preprocGraph, env, Utils.IS_LINK_FILTER_ACTIVE);//    preprocGraph = Preprocessing.applyTypeMissMatchCorrection(preprocGraph, IS_TYPE_MISS_MATCH_CORRECTION_ACTIVE);    preprocGraph = Preprocessing.addCcIdsToGraph(preprocGraph);//    Stats.writeVerticesToLog(preprocGraph.getVertices(), vertexList);    DataSet<Vertex<Long, ObjectMap>> vertices = preprocGraph.getVertices()        .map(new AddShadingTypeMapFunction())        .groupBy(new CcIdAndCompTypeKeySelector())        .reduceGroup(new GenerateHashCcIdGroupReduceFunction());    KeySelector<Vertex<Long, ObjectMap>, Long> simSortKeySelector = new CcIdKeySelector();    LOG.info("");    LOG.info("[2] INITIAL MATCHING");    // apply similarity functions, similarities are added as edge value and merged (if more than one similarity)    LOG.info("####################");    DataSet<Edge<Long, ObjectMap>> edges = SimCompUtility.computeEdgeSimWithVertices(preprocGraph);    Graph<Long, ObjectMap, ObjectMap> graph = Graph.fromDataSet(vertices, edges, env);//    Stats.writeCcToLog(graph, Lists.newArrayList(2430L), Utils.CC_ID);//    Stats.writeEdgesToLog(graph, Lists.newArrayList(2430L));    LOG.info("");    LOG.info("[3] INITIAL CLUSTERING");    LOG.info("######################");    /*     * TypeGroupBy: internally compType is used, afterwards typeIntern is used again.     */    if (PROCESSING_MODE.equals(Utils.DEFAULT_VALUE)) {      graph = new TypeGroupBy().execute(graph, 1000);      simSortKeySelector = new HashCcIdKeySelector();      LOG.info("##################### After TypeGroupBy");      Stats.writeVerticesToLog(graph.getVertices(), vertexList);//      Stats.writeCcToLog(graph.getVertices(), clusterList, Utils.CC_ID);    }    /*     * SimSort     */    graph = SimSort.prepare(graph, simSortKeySelector, env);    final double minClusterSim = 0.85;    graph = SimSort.execute(graph, 1000, minClusterSim);    graph = SimSort.excludeLowSimVertices(graph, env);    LOG.info("######################## After SimSort");    Stats.writeVerticesToLog(graph.getVertices(), vertexList);//    Stats.writeCcToLog(graph.getVertices(), clusterList, Utils.CC_ID);//    if (STOP_AFTER_INITIAL_CLUSTERING) {      if (Utils.PRINT_STATS) {        LOG.info("");        LOG.info("### Statistics: ");        Stats.printAccumulatorValues(env, graph, simSortKeySelector);        Stats.printComponentSizeAndCount(graph.getVertices());        //TODO//        Stats.countPrintGeoPointsPerOntology(preprocGraph);//        printEdgesSimValueBelowThreshold(allEdgesGraph, accumulatedSimValues);      }//    }    /**     * 4. Determination of cluster representative TODO 4.+5. needs 6-7minutes now, how to get it faster?     * - currently: entity from best "data source" (GeoNames > DBpedia > others)     */    final DataSet<Vertex<Long, ObjectMap>> mergedClusterVertices = graph.getVertices()        .groupBy(new HashCcIdKeySelector())        .reduceGroup(new BestDataSourceAllLabelsGroupReduceFunction());    DataSet<Vertex<Long, ObjectMap>> reprFilter = mergedClusterVertices.filter(new EvalVerticesCheckFilter(vertexList));    for (Vertex<Long, ObjectMap> vertex : reprFilter.collect()) {      LOG.info("representative: " + vertex);    }//      Stats.countPrintResourcesPerCc(components);//      Stats.printLabelsForMergedClusters(mergedCluster);//    DataSet<Tuple2<String, Long>> statsSumTypeCounts = mergedClusterVertices//        .map(new MapVertexToPropertyStringFunction(Utils.TYPE_INTERN))//        .groupBy(0).sum(1);//    LOG.info("[3] ### Type property counts after creation of representative: ");//    for (Tuple2<String, Long> tuple2 : statsSumTypeCounts.collect()) {//      LOG.info("[3] " + tuple2.f0 + " count: " + tuple2.f1);//    }    /**     * 5. Cluster Refinement     */    DataSet<Triplet<Long, ObjectMap, NullValue>> crossTriplets = mergedClusterVertices        .cross(mergedClusterVertices)        .with(new TripletCreateCrossFunction())        .filter(new EmptyTripletDeleteFilter());//    LOG.info("cross triplet count: " + crossTriplets.count());    DataSet<Triplet<Long, ObjectMap, ObjectMap>> simTriplets = SimCompUtility        .computeSimilarities(crossTriplets, Utils.DEFAULT_VALUE)        .map(new AggSimValueTripletMapFunction(Utils.IGNORE_MISSING_PROPERTIES)).withForwardedFields("f0;f1;f2;f3")        .filter(new MinRequirementThresholdFilterFunction(0.9)); //TODO remove LOG    DataSet<Tuple1<Long>> left = simTriplets.project(0);    DataSet<Tuple1<Long>> right = simTriplets.project(1);    DataSet<Vertex<Long, ObjectMap>> mergedMinusMatchedVertices = mergedClusterVertices        .leftOuterJoin(left.union(right).distinct())        .where(0).equalTo(0)        .with(new ExcludeVertexFlatJoinFunction());    // MERGE AGAIN!!!    DataSet<Vertex<Long, ObjectMap>> newClusters = simTriplets.map(new SimilarClusterMergeMapFunction());    LOG.info("merged minus matched: " + mergedMinusMatchedVertices.count());    LOG.info("matched: " + newClusters.count()); // todo check    for (Vertex<Long, ObjectMap> vertex : newClusters.collect()) {      LOG.info("newCluster: " + vertex);    }    DataSet<Vertex<Long, ObjectMap>> unionVertices = mergedMinusMatchedVertices.union(newClusters);    DataSet<Tuple2<Long, Long>> finalClusterSizes = unionVertices        .map(new MapFunction<Vertex<Long, ObjectMap>, Tuple2<Long, Long>>() {          @Override          public Tuple2<Long, Long> map(Vertex<Long, ObjectMap> vertex) throws Exception {            if (vertex.getValue().getVerticesList().size() == 1) {              LOG.info("1er " + vertex);            }            return new Tuple2<>((long) vertex.getValue().getVerticesList().size(), 1L);          }        })        .groupBy(0).sum(1);    LOG.info("[3] ### Final cluster sizes after refinement: ");    for (Tuple2<Long, Long> tuple : finalClusterSizes.collect()) {      LOG.info("[3] size, count: " + tuple);    }    DataSet<Vertex<Long, ObjectMap>> lastFilter = unionVertices.filter(new EvalVerticesCheckFilter(vertexList));    for (Vertex<Long, ObjectMap> vertex : lastFilter.collect()) {      LOG.info("lastFilter: " + vertex);    }    JobExecutionResult jobExecResult = env.getLastJobExecutionResult();    LOG.info("[3] ### Representatives created: "        + jobExecResult.getAccumulatorResult(Utils.REPRESENTATIVE_ACCUMULATOR));    LOG.info("[3] ### Clusters created in refinement step: "        + jobExecResult.getAccumulatorResult(Utils.REFINEMENT_MERGE_ACCUMULATOR));    newClusters.print();  }  /**   * Parses the program arguments or returns help if args are empty.   *   * @param args program arguments   * @return command line which can be used in the program   */  private static CommandLine parseArguments(String[] args) throws ParseException {    if (args.length == 0) {      HelpFormatter formatter = new HelpFormatter();      formatter.printHelp(MappingAnalysisExample.class.getName(), OPTIONS, true);      return null;    }    CommandLineParser parser = new BasicParser();    return parser.parse(OPTIONS, args);  }  @Override  public String getDescription() {    return MappingAnalysisExample.class.getName();  }  private static class ExcludeVertexFlatJoinFunction implements FlatJoinFunction<Vertex<Long,ObjectMap>, Tuple1<Long>, Vertex<Long, ObjectMap>> {    @Override    public void join(Vertex<Long, ObjectMap> left, Tuple1<Long> right, Collector<Vertex<Long, ObjectMap>> collector) throws Exception {      if (right == null) {        collector.collect(left);      }    }  }}