package org.mappinganalysis;import org.apache.commons.cli.*;import org.apache.flink.api.common.ProgramDescription;import org.apache.flink.api.common.functions.FilterFunction;import org.apache.flink.api.common.functions.FlatJoinFunction;import org.apache.flink.api.common.functions.JoinFunction;import org.apache.flink.api.java.DataSet;import org.apache.flink.api.java.ExecutionEnvironment;import org.apache.flink.api.java.operators.JoinOperator;import org.apache.flink.api.java.tuple.Tuple2;import org.apache.flink.graph.Edge;import org.apache.flink.graph.Graph;import org.apache.flink.graph.Triplet;import org.apache.flink.graph.Vertex;import org.apache.flink.types.NullValue;import org.apache.flink.util.Collector;import org.apache.log4j.Logger;import org.mappinganalysis.graph.ClusterComputation;import org.mappinganalysis.graph.FlinkConnectedComponents;import org.mappinganalysis.io.JDBCDataLoader;import org.mappinganalysis.model.ObjectMap;import org.mappinganalysis.model.Preprocessing;import org.mappinganalysis.model.functions.*;import org.mappinganalysis.utils.Stats;import org.mappinganalysis.utils.Utils;import java.util.Set;/** * Mapping analysis example */public class MappingAnalysisExample implements ProgramDescription {  private static final Logger LOG = Logger.getLogger(MappingAnalysisExample.class);  private static final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();  /**   * Command line options   */  private static final String OPTION_DELETE_LINKS_PREPROCESSING = "dlp";  private static final String OPTION_PRE_CLUSTER_FILTER = "pcf";  private static final String OPTION_ONLY_INITIAL_CLUSTER = "oic";//  private static final String OPTION_REPRESENTATIVE_STRATEGY = "rs";  private static final String OPTION_DATA_SET_NAME = "ds";  private static final String OPTION_WRITE_STATS = "ws";  private static boolean IS_LINK_FILTER_ACTIVE;  private static String PRE_CLUSTER_STRATEGY;  private static boolean STOP_AFTER_INITIAL_CLUSTERING;  private static boolean PRINT_STATS;  private static Options OPTIONS;  static {    OPTIONS = new Options();    OPTIONS.addOption(OPTION_DATA_SET_NAME, "dataset-name", true, // done        "Choose one of the datasets [" + Utils.CMD_GEO + " (default), " + Utils.CMD_LL + "].");    OPTIONS.addOption(OPTION_DELETE_LINKS_PREPROCESSING, "delete-links-preprocessing", false, // done        "Use delete 1:n strategy for initial link check (default: false).");    OPTIONS.addOption(OPTION_PRE_CLUSTER_FILTER, "pre-cluster-filter", true, // done        "Specify preprocessing filter strategy for entity properties ["            + Utils.CMD_COMBINED + " (default), geo, label, type]");    OPTIONS.addOption(OPTION_ONLY_INITIAL_CLUSTER, "only-initial-cluster", false, // done        "Don't compute final clusters, stop after preprocessing (default: false).");//    OPTIONS.addOption(OPTION_REPRESENTATIVE_STRATEGY, "representative-strategy",//        true, "Set strategy to determine cluster representative (currently only best datasource (default))");    OPTIONS.addOption(OPTION_WRITE_STATS, "write-stats", false,        "Write statistics to output (default: false)."); // done  }  /**   * main program   * @param args cmd args   * @throws Exception   */  public static void main(String[] args) throws Exception {    CommandLine cmd = parseArguments(args);    if (cmd == null) {      return;    }    String dataset;    final String optionDataset = cmd.getOptionValue(OPTION_DATA_SET_NAME);    if (optionDataset != null && optionDataset.equals(Utils.CMD_LL)) {      dataset = Utils.LL_FULL_NAME;    } else {      dataset = Utils.GEO_FULL_NAME;    }    IS_LINK_FILTER_ACTIVE = cmd.hasOption(OPTION_DELETE_LINKS_PREPROCESSING);    PRE_CLUSTER_STRATEGY = cmd.getOptionValue(OPTION_PRE_CLUSTER_FILTER, Utils.CMD_COMBINED);    STOP_AFTER_INITIAL_CLUSTERING = cmd.hasOption(OPTION_ONLY_INITIAL_CLUSTER);    PRINT_STATS = cmd.hasOption(OPTION_WRITE_STATS);    /**     * 0. Get data     */    final Graph<Long, ObjectMap, NullValue> graph = getInputGraph(dataset);    execute(graph);  }  /**   * Mapping analysis computation   * @param preprocGraph input graph   * @throws Exception   */  private static void execute(Graph<Long, ObjectMap, NullValue> preprocGraph) throws Exception {    /**     * 1. PREPROCESSING     */    preprocGraph = Preprocessing.applyLinkFilterStrategy(preprocGraph, env, IS_LINK_FILTER_ACTIVE);    preprocGraph = Preprocessing.applyTypePreprocessing(preprocGraph, env);//    preprocGraph = Preprocessing.applyLabelPreprocessing(preprocGraph, env);    final DataSet<Vertex<Long, ObjectMap>> baseVertices = preprocGraph.getVertices();    /**     * (2.) INITIAL MATCHING     * - apply similarity functions, similarities are added as edge value and merged     * (if more than one similarity)     */    final DataSet<Long> ccInputVertices = baseVertices.map(new CcVerticesCreator());    final Graph<Long, ObjectMap, NullValue> allGraph = createAllEdgesGraph(preprocGraph, baseVertices, ccInputVertices);    LOG.info("All edges computed, new graph created, start computing edge similarities...");    final DataSet<Triplet<Long, ObjectMap, ObjectMap>> accumulatedSimValues        = computeSimilarities(allGraph.getTriplets(), PRE_CLUSTER_STRATEGY);    LOG.info("Done.");    /**     * (3.) INITIAL CLUSTERING     * - connected components     */    final DataSet<Tuple2<Long, Long>> ccEdges = accumulatedSimValues.project(0, 1);    final DataSet<Tuple2<Long, Long>> components = FlinkConnectedComponents        .compute(ccInputVertices, ccEdges, 1000);    final DataSet<Vertex<Long, ObjectMap>> verticesWithComponentId = baseVertices        .join(components)        .where(0).equalTo(0)        .with(new CcResultVerticesJoin());    // update triplets with edge props//    DataSet<Edge<Long, ObjectMap>> joinedEdges = allGraph//        .getEdges()//        .join(accumulatedSimValues)//        .where(0, 1).equalTo(0, 1)//        .with(new CcResultEdgesJoin());    if (STOP_AFTER_INITIAL_CLUSTERING) {      if (PRINT_STATS) {        LOG.info("### Statistics: ");        Stats.countPrintResourcesPerCc(components);        Stats.printAccumulatorValues(env);        LOG.info("accum sim values: " + accumulatedSimValues.count());        DataSet<Edge<Long, NullValue>> noSimValue = allGraph.getEdges().leftOuterJoin(accumulatedSimValues)            .where(0, 1).equalTo(0, 1)            .with(new FlatJoinFunction<Edge<Long, NullValue>, Triplet<Long, ObjectMap, ObjectMap>,                Edge<Long, NullValue>>() {              @Override              public void join(Edge<Long, NullValue> edge, Triplet<Long, ObjectMap, ObjectMap> triplet,                               Collector<Edge<Long, NullValue>> collector) throws Exception {                if (triplet == null) {                  collector.collect(edge);                }              }            });        noSimValue.leftOuterJoin(baseVertices).where(0).equalTo(0).with(new JoinFunction<Edge<Long,NullValue>, Vertex<Long,ObjectMap>, Triplet<Long, ObjectMap, NullValue>>() {          @Override          public Triplet<Long, ObjectMap, NullValue> join(Edge<Long, NullValue> edge, Vertex<Long, ObjectMap> vertex) throws Exception {            return new Triplet<>(edge.getSource(), edge.getTarget(), vertex.getValue(), new ObjectMap(), NullValue.getInstance());          }        }).leftOuterJoin(baseVertices).where(1).equalTo(0).with(new JoinFunction<Triplet<Long,ObjectMap,NullValue>, Vertex<Long,ObjectMap>, Triplet<Long, ObjectMap, NullValue>>() {          @Override          public Triplet<Long, ObjectMap, NullValue> join(Triplet<Long, ObjectMap, NullValue> triplet, Vertex<Long, ObjectMap> vertex) throws Exception {            triplet.f3 = vertex.getValue();            return triplet;          }        }).print();      }      return;    }    /**     * 4. Determination of cluster representative     * - currently: entity from best "data source" (GeoNames > DBpedia > others)     */    final DataSet<Vertex<Long, ObjectMap>> mergedCluster = verticesWithComponentId        .groupBy(new CcIdKeySelector())        .reduceGroup(new BestDataSourceAllLabelsGroupReduceFunction());    // TODO print at end of program until #15 is fixed    if (PRINT_STATS) {      Stats.countPrintResourcesPerCc(components);      Stats.printLabelsForMergedClusters(mergedCluster);    }    /**     * 5. Cluster Refinement     */    mergedCluster.filter(new FilterFunction<Vertex<Long, ObjectMap>>() {      @Override      public boolean filter(Vertex<Long, ObjectMap> vertex) throws Exception {         return !(vertex.getValue().get(Utils.CL_VERTICES) instanceof Set);      }    });    DataSet<Edge<Long, Double>> edgesCrossedClusters = mergedCluster        .cross(mergedCluster)        .with(new ClusterEdgeCreationCrossFunction())        .filter(new FilterFunction<Edge<Long, Double>>() {          @Override          public boolean filter(Edge<Long, Double> edge) throws Exception {            return edge.getValue() > 0.7;          }        });    if (PRINT_STATS) {      edgesCrossedClusters.print();//      System.out.println(edgesCrossedClusters.count());    }  }  private static Graph<Long, ObjectMap, NullValue> createAllEdgesGraph(Graph<Long, ObjectMap, NullValue> graph,                                                                       DataSet<Vertex<Long, ObjectMap>> baseVertices,                                                                       DataSet<Long> ccInputVertices) throws Exception {    final DataSet<Tuple2<Long, Long>> tmpCcInputEdges = graph.getEdges().project(0, 1);    final DataSet<Tuple2<Long, Long>> tmpComponents = FlinkConnectedComponents.compute(ccInputVertices, tmpCcInputEdges, 1000);    // update all vertices with ccId    final DataSet<Vertex<Long, ObjectMap>> baseCcVertices = baseVertices        .join(tmpComponents)        .where(0).equalTo(0)        .with(new CcResultVerticesJoin());    final DataSet<Edge<Long, NullValue>> allEdges = ClusterComputation.computeComponentEdges(baseCcVertices, true);    return Graph.fromDataSet(baseVertices, allEdges, env);  }  public static DataSet<Triplet<Long, ObjectMap, ObjectMap>>  computeSimilarities(DataSet<Vertex<Long, ObjectMap>> vertices,                      DataSet<Edge<Long, NullValue>> edges,                      String filter) {    DataSet<Triplet<Long, ObjectMap, NullValue>> triplets = Graph        .fromDataSet(vertices, edges, env)        .getTriplets();    return computeSimilarities(triplets, filter);  }  public static DataSet<Triplet<Long, ObjectMap, ObjectMap>>  computeSimilarities(DataSet<Triplet<Long, ObjectMap, NullValue>> triplets, String filter) {    LOG.info("Started: compute similarities...");    switch (filter) {      case "geo":        return basicGeoSimilarity(triplets);      case "label":        return basicTrigramSimilarity(triplets);      case "type":        return basicTypeSimilarity(triplets);      default:        return joinDifferentSimilarityValues(basicGeoSimilarity(triplets),            basicTrigramSimilarity(triplets),            basicTypeSimilarity(triplets));    }  }  /**   * Join several sets of triplets which are being produced within property similarity computation.   * Edges where no similarity value is higher than the appropriate threshold are not in the result set.   * @param tripletDataSet intput datasets   * @return joined dataset with all similarities in an ObjectMap   */  @SafeVarargs  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> joinDifferentSimilarityValues(      DataSet<Triplet<Long, ObjectMap, ObjectMap>>... tripletDataSet) {    DataSet<Triplet<Long, ObjectMap, ObjectMap>> triplets = null;    boolean isFirstSet = false;    for (DataSet<Triplet<Long, ObjectMap, ObjectMap>> dataSet : tripletDataSet) {      if (!isFirstSet) {        triplets = dataSet;        isFirstSet = true;      } else {        triplets = triplets            .fullOuterJoin(dataSet)            .where(0, 1)            .equalTo(0, 1)            .with(new FullOuterJoinSimilarityValueFunction());      }    }    return triplets;  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicTypeSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .map(new TypeSimilarityMapper())        .filter(new TypeFilter());  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicTrigramSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .map(new TrigramSimilarityMapper())        .filter(new TrigramSimilarityFilter());  }  private static DataSet<Triplet<Long, ObjectMap, ObjectMap>> basicGeoSimilarity(      DataSet<Triplet<Long, ObjectMap, NullValue>> baseTriplets) {    return baseTriplets        .filter(new EmptyGeoCodeFilter())        .map(new GeoCodeSimFunction())        .filter(new GeoCodeThreshold());  }  /**   * Create the input graph for further analysis,   * restrict to edges where source and target are in vertices set.   * @return graph with vertices and edges.   * @throws Exception   * @param fullDbString complete server+port+db string   */  public static Graph<Long, ObjectMap, NullValue> getInputGraph(String fullDbString)      throws Exception {    JDBCDataLoader loader = new JDBCDataLoader(env);    DataSet<Vertex<Long, ObjectMap>> vertices = loader.getVertices(fullDbString);    // restrict edges to these where source and target are vertices    DataSet<Edge<Long, NullValue>> edges = loader.getEdges(fullDbString)        .leftOuterJoin(vertices)        .where(0).equalTo(0)        .with(new EdgeRestrictFlatJoinFunction())        .leftOuterJoin(vertices)        .where(1).equalTo(0)        .with(new EdgeRestrictFlatJoinFunction());    // delete vertices without any edges due to restriction    DataSet<Vertex<Long, ObjectMap>> left = vertices        .leftOuterJoin(edges)        .where(0).equalTo(0)        .with(new VertexRestrictFlatJoinFunction()).distinct(0);    DataSet<Vertex<Long, ObjectMap>> finalVertices = vertices        .leftOuterJoin(edges)        .where(0).equalTo(1)        .with(new VertexRestrictFlatJoinFunction()).distinct(0)        .union(left);    return Graph.fromDataSet(finalVertices, edges, env);  }  /**   * Parses the program arguments or returns help if args are empty.   *   * @param args program arguments   * @return command line which can be used in the program   */  private static CommandLine parseArguments(String[] args) throws ParseException {    if (args.length == 0) {      HelpFormatter formatter = new HelpFormatter();      formatter.printHelp(MappingAnalysisExample.class.getName(), OPTIONS, true);      return null;    }    CommandLineParser parser = new BasicParser();    return parser.parse(OPTIONS, args);  }  @Override  public String getDescription() {    return MappingAnalysisExample.class.getName();  }  private static class EdgeRestrictFlatJoinFunction implements FlatJoinFunction<Edge<Long, NullValue>,      Vertex<Long, ObjectMap>, Edge<Long, NullValue>> {    @Override    public void join(Edge<Long, NullValue> edge, Vertex<Long, ObjectMap> vertex,                     Collector<Edge<Long, NullValue>> collector) throws Exception {      if (vertex != null) {        collector.collect(edge);      }    }  }  private static class VertexRestrictFlatJoinFunction implements FlatJoinFunction<Vertex<Long, ObjectMap>,      Edge<Long, NullValue>, Vertex<Long, ObjectMap>> {    @Override    public void join(Vertex<Long, ObjectMap> vertex, Edge<Long, NullValue> edge,                     Collector<Vertex<Long, ObjectMap>> collector) throws Exception {      if (edge != null) {        collector.collect(vertex);      }    }  }}