package org.mappinganalysis;import com.google.common.collect.Sets;import org.apache.flink.api.common.functions.CoGroupFunction;import org.apache.flink.api.common.functions.MapFunction;import org.apache.flink.api.java.DataSet;import org.apache.flink.api.java.ExecutionEnvironment;import org.apache.flink.api.java.tuple.Tuple2;import org.apache.flink.graph.Edge;import org.apache.flink.graph.Graph;import org.apache.flink.graph.Triplet;import org.apache.flink.graph.Vertex;import org.apache.flink.types.NullValue;import org.apache.flink.util.Collector;import org.mappinganalysis.graph.FlinkConnectedComponents;import org.mappinganalysis.graph.ClusterComputation;import org.mappinganalysis.io.JDBCDataLoader;import org.mappinganalysis.model.FlinkVertex;import org.mappinganalysis.model.Preprocessing;import org.mappinganalysis.model.functions.*;import org.mappinganalysis.utils.Stats;import org.mappinganalysis.utils.Utils;import java.util.HashSet;import java.util.Map;/** * Read data from MySQL database via JDBC into Apache Flink. */public class MySQLToFlink {//  private static final Logger LOG = Logger.getLogger(MySQLToFlink.class);  public static void main(String[] args) throws Exception {    ExecutionEnvironment environment = ExecutionEnvironment.createLocalEnvironment();    // check if each edge points to existing vertices    // System.out.println(graph.validate(new InvalidVertexIdsValidator<Integer, String, NullValue>()));    Graph<Long, FlinkVertex, NullValue> graph = getInputGraph(Utils.GEO_FULL_NAME);    /**     * 1. PREPROCESSING     * - comment line(s) if not needed     */    graph = Preprocessing.applyLinkFilterStrategy(graph);    graph = Preprocessing.applyTypePreprocessing(graph);    /**     * 2. INITIAL MATCHING     * - apply similarity functions, similarities are added as edge value and merged (if more than one similarity)     */    final DataSet<Triplet<Long, FlinkVertex, NullValue>> baseTriplets = graph.getTriplets();    DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>> accumulatedSimValues        = initialSimilarityComputation(baseTriplets);    // update triplets with edge props    DataSet<Edge<Long, Map<String, Object>>> joinedEdges = graph        .getEdges()        .join(accumulatedSimValues)        .where(0, 1).equalTo(0, 1)        .with(new CcResultEdgesJoin());    /**     * 3. INITIAL CLUSTERING     * - connected components     */    final DataSet<Tuple2<Long, Long>> ccEdges = accumulatedSimValues.project(0, 1);    final DataSet<Long> ccVertices = graph.getVertices().map(new CcVerticesCreator());    FlinkConnectedComponents connectedComponents = new FlinkConnectedComponents(environment);    final DataSet<Tuple2<Long, Long>> ccResult = connectedComponents        .compute(ccVertices, ccEdges, 1000);    // update all vertices with ccId    DataSet<Vertex<Long, FlinkVertex>> vertices = graph.getVertices()        .join(ccResult)        .where(0).equalTo(0)        .with(new CcResultVerticesJoin());    DataSet<Edge<Long, NullValue>> allEdges        = ClusterComputation.computeComponentEdges(vertices);    DataSet<Edge<Long, NullValue>> newEdges        = ClusterComputation.restrictToNewEdges(graph.getEdges(), allEdges);    /**     * 4. Determination of cluster representative     * - currently: entity from best "data source" (GeoNames > DBpedia > others)     */    DataSet<Vertex<Long, FlinkVertex>> mergedCluster = vertices        .groupBy(new CcIdKeySelector())        .reduceGroup(new BestDataSourceGroupReduceFunction());    //    Stats.printLabelsForMergedClusters(mergedCluster);    //    Stats.countPrintResourcesPerCc(ccResult);    // Cluster refinement    // try merge clusters based on cluster representative / split, if too much diff  }  private static DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>>  initialSimilarityComputation(DataSet<Triplet<Long, FlinkVertex, NullValue>> baseTriplets) {    return joinDifferentSimilarityValues(basicGeoSimilarity(baseTriplets),        basicTrigramSimilarity(baseTriplets),        basicTypeSimilarity(baseTriplets));  }  @SafeVarargs  private static DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>>  joinDifferentSimilarityValues(DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>>... tripletDataSet) {    DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>> triplets = null;    boolean first = false;    for (DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>> dataSet : tripletDataSet) {      if (!first) {        triplets = dataSet;        first = true;      } else {        triplets = triplets            .fullOuterJoin(dataSet)            .where(0, 1)            .equalTo(0, 1)            .with(new JoinSimilarityValueFunction());      }    }    return triplets;  }  private static DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>> basicTypeSimilarity(DataSet<Triplet<Long, FlinkVertex, NullValue>> baseTriplets) {    return baseTriplets        .map(new TypeSimilarityMapper())        .filter(new TypeFilter());  }  private static DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>> basicTrigramSimilarity(DataSet<Triplet<Long, FlinkVertex, NullValue>> baseTriplets) {    return baseTriplets        .map(new TrigramSimilarityMapper())        .filter(new TrigramSimilarityFilter());  }  private static DataSet<Triplet<Long, FlinkVertex, Map<String, Object>>> basicGeoSimilarity(DataSet<Triplet<Long, FlinkVertex, NullValue>> baseTriplets) {    return baseTriplets        .filter(new EmptyGeoCodeFilter())        .map(new GeoCodeSimFunction())        .filter(new GeoCodeThreshold());  }  /**   * Create the input graph for further analysis.   * @return graph with vertices and edges.   * @throws Exception   * @param fullDbString complete server+port+db string   */  public static Graph<Long, FlinkVertex, NullValue> getInputGraph(String fullDbString) throws Exception {    ExecutionEnvironment environment = ExecutionEnvironment.createLocalEnvironment();    JDBCDataLoader loader = new JDBCDataLoader(environment);    DataSet<Edge<Long, NullValue>> edges = loader.getEdges(fullDbString);    DataSet<Vertex<Long, FlinkVertex>> vertices = loader.getVertices(fullDbString)        .map(new VertexCreator());    return Graph.fromDataSet(vertices, edges, environment);  }}